import express from "express";
import cors from "cors";
import dotenv from "dotenv";
import axios from "axios";
import admin from "firebase-admin"
import nodemailer from 'nodemailer';
import * as path from 'node:path';
import * as fs from 'node:fs';
import { Pool } from 'pg';

dotenv.config();

admin.initializeApp({
  credential: admin.credential.cert({
    project_id: process.env.FIREBASE_PROJECT_ID,
    client_email: process.env.FIREBASE_CLIENT_EMAIL,
    private_key: process.env.FIREBASE_PRIVATE_KEY.replace(/\\n/g, '\n'),
  }),
});

const app = express();
const PORT = process.env.PORT || 3001;
// Umo≈æni veƒæk√© JSON payloady (kv√¥li base64 obr√°zku)
app.use(express.json({ limit: '20mb' }));
app.use(cors());

// Vlo≈æ si svoj kƒæ√∫ƒç do .env s√∫boru alebo priamo sem
const GOOGLE_VISION_API_KEY = process.env.GOOGLE_VISION_API_KEY || " ";

// Z√°kladn√Ω health check
app.get("/", (req, res) => {
  res.send("Google Vision OCR backend be≈æ√≠.");
});
const db = new Pool({
  connectionString: process.env.SUPABASE_DB_URL,
});
app.get('/api/profile', async (req, res) => {
  const idToken = req.headers.authorization?.split(' ')[1];
  if (!idToken) return res.status(401).json({ error: 'Token ch√Ωba' });

  try {
    const decoded = await admin.auth().verifyIdToken(idToken);
    const uid = decoded.uid;

    const result = await db.query(
        'SELECT id, email, name, coffee_preferences, experience_level, ai_recommendation, manual_input FROM user_profiles WHERE id = $1',
        [uid]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Profil neexistuje' });
    }

    return res.json(result.rows[0]);
  } catch (err) {
    console.error('‚ùå Chyba naƒç√≠tania profilu:', err);
    res.status(500).json({ error: 'Nepodarilo sa naƒç√≠ta≈• profil' });
  }
});


app.put('/api/profile', async (req, res) => {
  const idToken = req.headers.authorization?.split(' ')[1];
  if (!idToken) {
    console.warn('‚ö†Ô∏è Token ch√Ωba v hlaviƒçke');
    return res.status(401).json({ error: 'Token ch√Ωba' });
  }

  try {
    console.log('üì• Prijat√Ω PUT /api/profile');
    console.log('üßæ Raw body:', JSON.stringify(req.body, null, 2));

    const decoded = await admin.auth().verifyIdToken(idToken);
    const uid = decoded.uid;

    console.log('üîê Overen√Ω Firebase UID:', uid);

    const {
      name,
      bio,
      avatar_url,
      coffee_preferences,
      experience_level,
      ai_recommendation,
      manual_input,
    } = req.body;

    console.log('üß© Extrahovan√© polia:');
    console.log('name:', name);
    console.log('bio:', bio);
    console.log('avatar_url:', avatar_url);
    console.log('experience_level:', experience_level);
    console.log('coffee_preferences:', coffee_preferences);
    console.log('ai_recommendation:', ai_recommendation);
    console.log('manual_input:', manual_input);

    const safe = (val) => typeof val !== 'undefined' ? val : null;

    await db.query(
      `
        UPDATE user_profiles SET
                               name = COALESCE($1, name),
                               bio = COALESCE($2, bio),
                               avatar_url = COALESCE($3, avatar_url),
                               coffee_preferences = $4,
                               experience_level = $5,
                               ai_recommendation = $6,
                               manual_input = $7,
                               updated_at = now()
        WHERE id = $8
      `,
      [
        safe(name),
        safe(bio),
        safe(avatar_url),
        coffee_preferences,
        experience_level,
        ai_recommendation,
        manual_input,
        uid
      ]
    );

    console.log('‚úÖ √öspe≈°ne aktualizovan√© v DB');

    const log = `[${new Date().toISOString()}] PROFILE UPDATE: ${uid} (${decoded.email})
--- Preferences ---
${JSON.stringify(coffee_preferences, null, 2)}
--- AI ---
${ai_recommendation}
--- Manual ---
${manual_input}
--- Meta ---
name: ${name}, bio: ${bio}, avatar_url: ${avatar_url}
`;

    fs.appendFileSync(path.join('./logs', 'profile.log'), log);

    res.json({ message: 'Profil aktualizovan√Ω' });
  } catch (err) {
    console.error('‚ùå Chyba pri update profilu:', err);
    res.status(500).json({ error: 'Chyba servera' });
  }
});



app.post('/api/auth', async (req, res) => {
  const idToken = req.headers.authorization?.split(' ')[1];

  try {
    const decoded = await admin.auth().verifyIdToken(idToken);
    const uid = decoded.uid;
    const email = decoded.email;
    const timestamp = new Date().toISOString();
    const userAgent = req.headers['user-agent'] || 'unknown';

    // ‚ûï VLO≈Ω PROFIL DO DB AK NEEXISTUJE
    try {
      await db.query(
          `INSERT INTO user_profiles (id, email) VALUES ($1, $2) ON CONFLICT (id) DO NOTHING`,
          [uid, email]
      );
      console.log('‚úÖ Profil vlo≈æen√Ω (alebo u≈æ existoval)');
    } catch (dbErr) {
      console.warn('‚ö†Ô∏è Nepodarilo sa vlo≈æi≈• profil:', dbErr);
    }

    // Audit log
    const logEntry = `[${timestamp}] LOGIN: ${email} (${uid}) ‚Äì ${userAgent}\n`;
    fs.appendFileSync(path.join('./logs', 'auth.log'), logEntry);
    console.log('‚úÖ Audit log:', logEntry.trim());

    res.status(200).json({ message: 'Authenticated', uid, email });
  } catch (err) {
    console.error('Token verify error:', err);
    res.status(401).json({ error: 'Invalid token' });
  }
});


app.post('/api/logout', async (req, res) => {
  const idToken = req.headers.authorization?.split(' ')[1];

  if (!idToken) {
    return res.status(401).json({ error: 'Token ch√Ωba' });
  }

  try {
    const decoded = await admin.auth().verifyIdToken(idToken);
    const uid = decoded.uid;

    // ‚úÖ Zneplatni refresh tokeny pre tohto pou≈æ√≠vateƒæa
    await admin.auth().revokeRefreshTokens(uid);

    console.log('‚úÖ Refresh tokeny zneplatnen√© pre UID:', uid);
    res.status(200).json({ message: 'Odhl√°senie √∫spe≈°n√©' });
  } catch (err) {
    console.error('‚ùå Chyba pri logout-e:', err);
    res.status(401).json({ error: 'Neplatn√Ω token' });
  }
});
app.post('/api/register', async (req, res) => {
  const { email, password } = req.body;

  try {
    // ‚úÖ Vytvor pou≈æ√≠vateƒæa cez Admin SDK ‚Äì NEprihl√°si ho
    const userRecord = await admin.auth().createUser({ email, password });

    const link = await admin.auth().generateEmailVerificationLink(email);

    // ‚úâÔ∏è Po≈°li verifikaƒçn√Ω email ‚Äì pou≈æije≈° rovnak√Ω nodemailer ako doteraz
    const transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS,
      },
    });

    await transporter.sendMail({
      from: '"BrewMate" <noreply@brewmate.sk>',
      to: email,
      subject: 'Overenie √∫ƒçtu',
      html: `
        <h2>Vitaj v BrewMate!</h2>
        <p>Klikni na odkaz ni≈æ≈°ie a over svoju emailov√∫ adresu:</p>
        <a href="${link}">Overi≈• email</a>
        <p>Po overen√≠ sa m√¥≈æe≈° prihl√°si≈•.</p>
      `,
    });

    console.log('‚úÖ Pou≈æ√≠vateƒæ vytvoren√Ω a email odoslan√Ω:', email);
    res.status(200).json({ message: 'Pou≈æ√≠vateƒæ vytvoren√Ω a email odoslan√Ω' });
  } catch (err) {
    console.error('‚ùå Chyba pri registr√°cii:', err);
    res.status(500).json({ error: 'Zlyhala registr√°cia' });
  }
});


app.post('/api/reset-password', async (req, res) => {
  const { email } = req.body;

  if (!email) return res.status(400).json({ error: 'Email je povinn√Ω' });

  try {
    const link = await admin.auth().generatePasswordResetLink(email);

    // Po≈°li email cez nodemailer
    const transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS,
      },
    });

    await transporter.sendMail({
      from: '"BrewMate" <noreply@brewmate.sk>',
      to: email,
      subject: 'Obnova hesla ‚Äì BrewMate',
      html: `
        <h2>Obnova hesla</h2>
        <p>Klikni na odkaz ni≈æ≈°ie na reset hesla:</p>
        <a href="${link}" style="padding:10px 20px; background:#ff6b35; color:white; text-decoration:none; border-radius:5px;">Resetova≈• heslo</a>
        <p>Ak si o obnovu ne≈æiadal, ignoruj tento email.</p>
      `,
    });

    res.status(200).json({ message: 'Email na obnovu odoslan√Ω' });
  } catch (err) {
    console.error('‚ùå Reset hesla error:', err);
    res.status(500).json({ error: 'Nepodarilo sa odosla≈• email na obnovu hesla' });
  }
});

// Hlavn√Ω OCR endpoint
app.post("/ocr", async (req, res) => {
  try {
    const { base64image } = req.body;
    if (!base64image) {
      return res.status(400).json({ error: "Ch√Ωba obr√°zok v base64." });
    }

    const payload = {
      requests: [
        {
          image: { content: base64image },
          features: [{ type: "TEXT_DETECTION" }]
        }
      ]
    };

    const url = `https://vision.googleapis.com/v1/images:annotate?key=${GOOGLE_VISION_API_KEY}`;
    const response = await axios.post(url, payload, {
      headers: { "Content-Type": "application/json" }
    });

    // Extrahuj text z odpovede Vision API
    const text = response.data.responses?.[0]?.fullTextAnnotation?.text || "";

    res.json({ text });
  } catch (error) {
    // Pre debug vyp√≠≈° viac, aj keƒè API zlyh√°
    console.error("OCR server error:", error?.message ?? error);
    if (error?.response?.data) {
      console.error("Google response:", JSON.stringify(error.response.data, null, 2));
    }
    res.status(500).json({ error: "OCR failed", detail: error?.message ?? error });
  }
});

// OLD ONE
// app.post('/api/ocr/save', async (req, res) => {
//   const idToken = req.headers.authorization?.split(' ')[1];
//   if (!idToken) return res.status(401).json({ error: 'Token ch√Ωba' });
//
//   try {
//     const decoded = await admin.auth().verifyIdToken(idToken);
//     const uid = decoded.uid;
//
//     const { original_text, corrected_text } = req.body;
//
//     await db.query(`
//       INSERT INTO ocr_logs (user_id, original_text, corrected_text, created_at)
//       VALUES ($1, $2, $3, now())
//     `, [uid, original_text, corrected_text]);
//
//     res.status(200).json({ message: 'OCR ulo≈æen√©' });
//   } catch (err) {
//     console.error('‚ùå Chyba pri ukladan√≠ OCR:', err);
//     res.status(500).json({ error: 'Chyba servera pri ukladan√≠ OCR' });
//   }
// });

app.post('/api/ocr/save', async (req, res) => {
  const idToken = req.headers.authorization?.split(' ')[1];
  if (!idToken) return res.status(401).json({ error: 'Token ch√Ωba' });

  try {
    const decoded = await admin.auth().verifyIdToken(idToken);
    const uid = decoded.uid;

    const { original_text, corrected_text } = req.body;

    // Z√≠skaj preferencie pou≈æ√≠vateƒæa
    const prefResult = await db.query(
      'SELECT coffee_preferences FROM user_profiles WHERE id = $1',
      [uid]
    );

    const preferences = prefResult.rows[0]?.coffee_preferences;

    // Vypoƒç√≠taj zhodu (tu m√¥≈æete prida≈• AI vyhodnotenie)
    const matchPercentage = calculateMatch(corrected_text, preferences);
    const isRecommended = matchPercentage > 75;

    const result = await db.query(`
      INSERT INTO ocr_logs (user_id, original_text, corrected_text, match_percentage, is_recommended, created_at)
      VALUES ($1, $2, $3, $4, $5, now())
      RETURNING id
    `, [uid, original_text, corrected_text, matchPercentage, isRecommended]);

    res.status(200).json({
      message: 'OCR ulo≈æen√©',
      id: result.rows[0].id,
      match_percentage: matchPercentage,
      is_recommended: isRecommended
    });
  } catch (err) {
    console.error('‚ùå Chyba pri ukladan√≠ OCR:', err);
    res.status(500).json({ error: 'Chyba servera pri ukladan√≠ OCR' });
  }
});

function calculateMatch(coffeeText, preferences) {
  // Jednoduch√Ω algoritmus na v√Ωpoƒçet zhody
  // V re√°lnej aplik√°cii by ste pou≈æili AI alebo zlo≈æitej≈°√≠ algoritmus

  if (!preferences) return 70; // Predvolen√° hodnota

  let score = 50; // Z√°kladn√© sk√≥re

  // Pr√≠klad: kontrola intenzity
  if (preferences.intensity) {
    if (coffeeText.toLowerCase().includes(preferences.intensity.toLowerCase())) {
      score += 20;
    }
  }

  // Kontrola typu pra≈æenia
  if (preferences.roast_type) {
    if (coffeeText.toLowerCase().includes(preferences.roast_type.toLowerCase())) {
      score += 15;
    }
  }

  // Kontrola chut√≠
  if (preferences.flavor_notes && Array.isArray(preferences.flavor_notes)) {
    preferences.flavor_notes.forEach(flavor => {
      if (coffeeText.toLowerCase().includes(flavor.toLowerCase())) {
        score += 10;
      }
    });
  }

  return Math.min(score, 100); // Max 100%
}

app.post('/api/send-verification-email', async (req, res) => {
  const { email } = req.body;

  if (!email) return res.status(400).json({ error: 'Email je povinn√Ω' });

  try {
    // 1. Vygeneruj verifikaƒçn√Ω link
    const link = await admin.auth().generateEmailVerificationLink(email);

    // 2. Nastav SMTP transport
    const transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS,
      },
    });

    // 3. Obsah e-mailu
    const mailOptions = {
      from: '"BrewMate" <noreply@brewmate.sk>',
      to: email,
      subject: 'Overenie emailu pre BrewMate üç∫',
      html: `
        <div style="font-family: Arial, sans-serif; line-height: 1.6;">
          <h2>Vitaj v BrewMate!</h2>
          <p>Pre overenie tvojej emailovej adresy klikni na nasleduj√∫ci odkaz:</p>
          <a href="${link}" style="display: inline-block; padding: 10px 20px; background-color: #ff6b35; color: white; text-decoration: none; border-radius: 5px;">
            Overi≈• email
          </a>
          <p>Ak si tento √∫ƒçet nevytvoril ty, tento email ignoruj.</p>
        </div>
      `,
    };

    // 4. Po≈°li e-mail
    await transporter.sendMail(mailOptions);
    console.log('‚úÖ Verifikaƒçn√Ω email odoslan√Ω:', email);

    res.status(200).json({ message: 'Verifikaƒçn√Ω email odoslan√Ω' });
  } catch (err) {
    console.error('‚ùå Chyba pri odosielan√≠ emailu:', err);
    res.status(500).json({ error: 'Zlyhalo odoslanie verifikaƒçn√©ho emailu' });
  }
});



app.post('/api/ocr/evaluate', async (req, res) => {
  const idToken = req.headers.authorization?.split(' ')[1];
  if (!idToken) return res.status(401).json({ error: 'Token ch√Ωba' });

  try {
    const decoded = await admin.auth().verifyIdToken(idToken);
    const uid = decoded.uid;

    const { corrected_text } = req.body;
    if (!corrected_text) return res.status(400).json({ error: 'Ch√Ωba text k√°vy' });

    const result = await db.query(
      'SELECT coffee_preferences FROM user_profiles WHERE id = $1',
      [uid]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Pou≈æ√≠vateƒæ nen√°jden√Ω' });
    }

    const coffeePreferences = result.rows[0].coffee_preferences;

    const prompt = `
Porovnaj preferencie pou≈æ√≠vateƒæa s popisom k√°vy a vyhodno≈•, ƒçi mu k√°va bude chuti≈•. Pou≈æ√≠vateƒæove preferencie (JSON):
${JSON.stringify(coffeePreferences, null, 2)}

Popis k√°vy (OCR v√Ωstup):
${corrected_text}

V√Ωsledok nap√≠≈° ako pou≈æ√≠vateƒæovi:
- Zaƒçni vetou: "T√°to k√°va ti pravdepodobne bude chuti≈•, preto≈æe..." alebo "Zrejme ti chuti≈• nebude, lebo..."
- Pridaj struƒçn√© zd√¥vodnenie na z√°klade chuti, pra≈æenia, sp√¥sobu pr√≠pravy atƒè.
`;

    const response = await axios.post(
      'https://api.openai.com/v1/chat/completions',
      {
        model: 'gpt-4o',
        messages: [
          { role: 'system', content: 'Si expert na k√°vu. Porovn√°va≈° preferencie s popisom k√°vy.' },
          { role: 'user', content: prompt },
        ],
        temperature: 0.2,
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
          'Content-Type': 'application/json',
        },
      }
    );

    const recommendation = response.data.choices?.[0]?.message?.content?.trim();
    return res.json({ recommendation });
  } catch (err) {
    console.error('‚ùå Chyba AI vyhodnotenia:', err);
    return res.status(500).json({ error: 'Nepodarilo sa vyhodnoti≈• k√°vu' });
  }
});




// ========== DASHBOARD ENDPOINT ==========
app.get('/api/dashboard', async (req, res) => {
  const idToken = req.headers.authorization?.split(' ')[1];
  if (!idToken) return res.status(401).json({ error: 'Token ch√Ωba' });

  try {
    const decoded = await admin.auth().verifyIdToken(idToken);
    const uid = decoded.uid;

    // Z√≠skaj profil pou≈æ√≠vateƒæa
    const profileResult = await db.query(
      'SELECT name, email, coffee_preferences FROM user_profiles WHERE id = $1',
      [uid]
    );

    const profile = profileResult.rows[0] || {};

    // Z√≠skaj ≈°tatistiky
    const statsResult = await db.query(`
      SELECT 
        COUNT(*) as coffee_count,
        COALESCE(AVG(rating), 0) as avg_rating,
        COUNT(DISTINCT coffee_id) FILTER (WHERE is_favorite = true) as favorites_count
      FROM coffee_ratings
      WHERE user_id = $1 
        AND EXTRACT(YEAR FROM created_at) = EXTRACT(YEAR FROM CURRENT_DATE)
    `, [uid]);

    const stats = {
      coffeeCount: parseInt(statsResult.rows[0]?.coffee_count || 0),
      avgRating: parseFloat(statsResult.rows[0]?.avg_rating || 0).toFixed(1),
      favoritesCount: parseInt(statsResult.rows[0]?.favorites_count || 0)
    };

    // Z√≠skaj hist√≥riu skenovan√≠ (posledn√Ωch 5)
    const scansResult = await db.query(`
      SELECT 
        id,
        corrected_text as coffee_name,
        COALESCE(rating, 4.0) as rating,
        COALESCE(match_percentage, 70) as match,
        created_at as timestamp,
        is_recommended
      FROM ocr_logs
      WHERE user_id = $1
      ORDER BY created_at DESC
      LIMIT 5
    `, [uid]);

    const recentScans = scansResult.rows.map(row => ({
      id: row.id.toString(),
      name: extractCoffeeName(row.coffee_name) || 'Nezn√°ma k√°va',
      rating: parseFloat(row.rating),
      match: parseInt(row.match),
      timestamp: row.timestamp,
      isRecommended: row.is_recommended || row.match > 75
    }));

    // Z√≠skaj odpor√∫ƒçania na z√°klade preferenci√≠
    const recommendations = await generateRecommendations(profile.coffee_preferences);

    // Denn√Ω tip
    const dailyTip = getDailyTip();

    res.json({
      profile: {
        name: profile.name || profile.email?.split('@')[0] || 'K√°vo≈°',
        email: profile.email
      },
      stats,
      recentScans,
      recommendations,
      dailyTip
    });

  } catch (err) {
    console.error('‚ùå Dashboard error:', err);
    res.status(500).json({ error: 'Chyba pri naƒç√≠tan√≠ dashboard' });
  }
});

// ========== VYMAZA≈§ OCR Z√ÅZNAM ==========
app.delete('/api/ocr/:id', async (req, res) => {
  const idToken = req.headers.authorization?.split(' ')[1];
  if (!idToken) return res.status(401).json({ error: 'Token ch√Ωba' });

  try {
    const decoded = await admin.auth().verifyIdToken(idToken);
    const uid = decoded.uid;
    const recordId = req.params.id;

    // Vyma≈æ z√°znam iba ak patr√≠ pou≈æ√≠vateƒæovi
    const result = await db.query(
      'DELETE FROM ocr_logs WHERE id = $1 AND user_id = $2 RETURNING id',
      [recordId, uid]
    );

    if (result.rowCount === 0) {
      return res.status(404).json({ error: 'Z√°znam neexistuje alebo nem√°te opr√°vnenie' });
    }

    // Vyma≈æ aj s√∫visiace hodnotenie ak existuje
    await db.query(
      'DELETE FROM coffee_ratings WHERE coffee_id = $1 AND user_id = $2',
      [recordId, uid]
    );

    console.log(`‚úÖ OCR z√°znam ${recordId} vymazan√Ω pou≈æ√≠vateƒæom ${uid}`);
    res.json({ message: 'Z√°znam vymazan√Ω' });
  } catch (err) {
    console.error('‚ùå Chyba pri mazan√≠ OCR z√°znamu:', err);
    res.status(500).json({ error: 'Chyba pri mazan√≠ z√°znamu' });
  }
});

// ========== HIST√ìRIA OCR SKENOVAN√ç ==========
app.get('/api/ocr/history', async (req, res) => {
  const idToken = req.headers.authorization?.split(' ')[1];
  if (!idToken) return res.status(401).json({ error: 'Token ch√Ωba' });

  try {
    const decoded = await admin.auth().verifyIdToken(idToken);
    const uid = decoded.uid;
    const limit = parseInt(req.query.limit) || 10;

    const result = await db.query(`
      SELECT 
        id,
        original_text,
        corrected_text,
        created_at,
        rating,
        match_percentage,
        is_recommended
      FROM ocr_logs
      WHERE user_id = $1
      ORDER BY created_at DESC
      LIMIT $2
    `, [uid, limit]);

    const history = result.rows.map(row => ({
      id: row.id.toString(),
      coffee_name: extractCoffeeName(row.corrected_text),
      original_text: row.original_text,
      corrected_text: row.corrected_text,
      created_at: row.created_at,
      rating: row.rating || 0,
      match_percentage: row.match_percentage || 0,
      is_recommended: row.is_recommended || false
    }));

    res.json(history);
  } catch (err) {
    console.error('‚ùå History error:', err);
    res.status(500).json({ error: 'Chyba pri naƒç√≠tan√≠ hist√≥rie' });
  }
});

// ========== HODNOTENIE K√ÅVY ==========
app.post('/api/coffee/rate', async (req, res) => {
  const idToken = req.headers.authorization?.split(' ')[1];
  if (!idToken) return res.status(401).json({ error: 'Token ch√Ωba' });

  try {
    const decoded = await admin.auth().verifyIdToken(idToken);
    const uid = decoded.uid;

    const { coffee_id, rating, notes } = req.body;

    // Vlo≈æ alebo aktualizuj hodnotenie
    await db.query(`
      INSERT INTO coffee_ratings (user_id, coffee_id, rating, notes, created_at)
      VALUES ($1, $2, $3, $4, now())
      ON CONFLICT (user_id, coffee_id) 
      DO UPDATE SET 
        rating = $3,
        notes = $4,
        updated_at = now()
    `, [uid, coffee_id, rating, notes]);

    // Aktualizuj hodnotenie v OCR logoch ak existuje
    await db.query(`
      UPDATE ocr_logs 
      SET rating = $2 
      WHERE id = $1 AND user_id = $3
    `, [coffee_id, rating, uid]);

    res.json({ message: 'Hodnotenie ulo≈æen√©' });
  } catch (err) {
    console.error('‚ùå Rating error:', err);
    res.status(500).json({ error: 'Chyba pri ukladan√≠ hodnotenia' });
  }
});

// ========== PRIDA≈§/ODOBRA≈§ Z OBƒΩ√öBEN√ùCH ==========
app.post('/api/coffee/favorite/:id', async (req, res) => {
  const idToken = req.headers.authorization?.split(' ')[1];
  if (!idToken) return res.status(401).json({ error: 'Token ch√Ωba' });

  try {
    const decoded = await admin.auth().verifyIdToken(idToken);
    const uid = decoded.uid;
    const coffeeId = req.params.id;

    // Skontroluj ƒçi u≈æ existuje
    const existing = await db.query(
      'SELECT is_favorite FROM coffee_ratings WHERE user_id = $1 AND coffee_id = $2',
      [uid, coffeeId]
    );

    if (existing.rows.length > 0) {
      // Toggle existuj√∫ci z√°znam
      const newFavorite = !existing.rows[0].is_favorite;
      await db.query(
        'UPDATE coffee_ratings SET is_favorite = $3, updated_at = now() WHERE user_id = $1 AND coffee_id = $2',
        [uid, coffeeId, newFavorite]
      );
      res.json({ is_favorite: newFavorite });
    } else {
      // Vytvor nov√Ω z√°znam
      await db.query(
        'INSERT INTO coffee_ratings (user_id, coffee_id, is_favorite, created_at) VALUES ($1, $2, true, now())',
        [uid, coffeeId]
      );
      res.json({ is_favorite: true });
    }
  } catch (err) {
    console.error('‚ùå Favorite error:', err);
    res.status(500).json({ error: 'Chyba pri ukladan√≠ obƒæ√∫benej k√°vy' });
  }
});

// ========== HELPER FUNKCIE ==========
function extractCoffeeName(text) {
  if (!text) return 'Nezn√°ma k√°va';

  // Pok√∫s sa extrahova≈• n√°zov k√°vy z textu
  // Hƒæadaj zn√°me znaƒçky alebo vzory
  const brands = ['Lavazza', 'Illy', 'Segafredo', 'Kimbo', 'Pellini', 'Bazzara'];
  for (const brand of brands) {
    if (text.includes(brand)) {
      // Vr√°≈• znaƒçku + nasleduj√∫ce slovo
      const regex = new RegExp(`${brand}\\s+\\w+`, 'i');
      const match = text.match(regex);
      if (match) return match[0];
    }
  }

  // Ak nen√°jde znaƒçku, vr√°≈• prv√Ωch p√°r slov
  const words = text.split(/\s+/).slice(0, 3).join(' ');
  return words.substring(0, 50);
}

function getDailyTip() {
  const tips = [
    'Espresso Lungo - perfektn√© pre produkt√≠vne r√°no',
    'Flat White - keƒè potrebuje≈° jemn√∫ chu≈• s energiou',
    'V60 - pre objavovanie nov√Ωch chut√≠',
    'Cold Brew - osvie≈æenie na hor√∫ce dni',
    'Cappuccino - klasika ktor√° nikdy nesklame',
    'Americano - pre t√Ωch ƒço maj√∫ radi jemn√∫ k√°vu',
    'Macchiato - mal√© pote≈°enie s veƒækou chu≈•ou',
  ];
  const today = new Date().getDay();
  return tips[today % tips.length];
}

async function generateRecommendations(preferences) {
  // Z√°kladn√© odpor√∫ƒçania podƒæa preferenci√≠
  const recommendations = [];

  // Tu m√¥≈æete prida≈• logiku na generovanie odpor√∫ƒçan√≠
  // na z√°klade pou≈æ√≠vateƒæov√Ωch preferenci√≠

  // Zatiaƒæ vr√°time statick√© odpor√∫ƒçania
  const coffees = [
    { name: 'Colombia Geisha', rating: 4.8, match: 95, origin: 'Colombia' },
    { name: 'Ethiopia Yirgacheffe', rating: 4.6, match: 88, origin: 'Ethiopia' },
    { name: 'Brazil Santos', rating: 4.5, match: 82, origin: 'Brazil' },
    { name: 'Guatemala Antigua', rating: 4.7, match: 90, origin: 'Guatemala' },
    { name: 'Kenya AA', rating: 4.9, match: 93, origin: 'Kenya' },
  ];

  // Ak m√° pou≈æ√≠vateƒæ preferencie, filtruj podƒæa nich
  if (preferences) {
    // Tu pridajte logiku filtrovania podƒæa preferenci√≠
  }

  return coffees.slice(0, 3).map(coffee => ({
    id: Math.random().toString(),
    name: coffee.name,
    rating: coffee.rating,
    match: coffee.match,
    timestamp: new Date(),
    isRecommended: true
  }));
}





app.listen(PORT, () => {
  console.log(`OCR server be≈æ√≠ na porte ${PORT}`);
});
